import java.util.Arrays;

/**
 * Neyo
 */

public class Assignment1
{
    public static void main(String[] args) {
        //-------------------------------------------------CREATING THE ARRAYS BELOW-------------------------------------------------------------------//
        
        /**SHELL SORT arrays
         *
         */
        
        Integer[] arrayShell_Given = new Integer[]{9,6,8,12,3,1,7};
        Integer[] arrayShell_10integers = new Integer[]{25, 32, 16, 28, 7, 10, 5, 2, 0, 1};
        Integer[] arrayShell_20integers = new Integer[]{20,12,8,17,18,6,13,3,19,9,11,2,7,14,15,16,4,5,10,1};
        
        /**BUBBLE SORT arrays
         *
         */
        
        Integer[] arrayBubble_Sorted = new Integer[]{1,2,3,4,5,6,7,8,9,10};
        Integer[] arrayBubble_Unsorted = new Integer[]{10,1,5,2,3,9,6,4,8,7};
        
        /**
         * Runtime arrays
         */
        
        Integer[] runtime10sorted = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        Integer[] runtime10unsorted = new Integer[]{7, 9, 3, 5, 8, 4, 6, 10, 1, 2};
        
        Integer[] runtime100sorted = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
        Integer[] runtime100unsorted = new Integer[]{28, 37, 43, 44, 86, 99, 2, 67, 72, 69, 96, 56, 51, 94, 81, 79, 65, 23, 6, 46, 97, 40, 30, 73, 20, 98, 49, 76, 41, 27, 55, 61, 13, 89, 9, 62, 47, 21, 78, 48, 60, 93, 57, 75, 3, 31, 45, 70, 68, 66, 33, 80, 25, 85, 29, 100, 42, 5, 22, 35, 24, 15, 8, 17, 58, 52, 16, 84, 39, 64, 92, 19, 32, 12, 34, 87, 63, 95, 91, 38, 71, 59, 36, 54, 77, 18, 88, 26, 90, 4, 82, 11, 10, 50, 14, 1, 7, 53, 83, 74};
        
        Integer[] runtime1000sorted = new Integer[]{};
        Integer[] runtime1000unsorted = new Integer[]{117, 124, 895, 335, 483, 874, 960, 876, 587, 809, 378, 456, 425, 260, 632, 573, 217, 572, 813, 174, 447, 322, 216, 656, 252, 498, 539, 125, 878, 806, 740, 430, 435, 52, 350, 382, 589, 111, 586, 126, 457, 943, 423, 569, 40, 918, 700, 465, 699, 381, 613, 271, 332, 620, 714, 510, 14, 575, 341, 910, 392, 167, 837, 579, 945, 284, 989, 993, 847, 389, 369, 419, 49, 988, 445, 242, 614, 287, 101, 916, 223, 769, 519, 452, 438, 86, 926, 923, 467, 543, 698, 478, 156, 979, 427, 480, 737, 328, 696, 298, 373, 440, 208, 130, 566, 521, 517, 84, 391, 69, 969, 645, 976, 967, 921, 727, 671, 5, 593, 61, 667, 781, 802, 38, 863, 952, 107, 562, 122, 997, 540, 178, 528, 453, 919, 255, 265, 522, 291, 345, 722, 343, 981, 488, 674, 180, 145, 603, 165, 642, 679, 789, 499, 854, 650, 793, 971, 670, 790, 785, 8, 53, 113, 958, 760, 93, 66, 974, 441, 432, 541, 74, 542, 196, 492, 134, 1000, 51, 161, 506, 546, 560, 537, 677, 182, 871, 875, 908, 658, 581, 235, 966, 934, 494, 207, 821, 431, 770, 195, 867, 59, 78, 179, 623, 398, 741, 597, 30, 280, 912, 859, 468, 852, 277, 720, 484, 57, 362, 903, 220, 767, 25, 728, 336, 713, 992, 849, 840, 889, 21, 787, 95, 116, 89, 530, 289, 665, 961, 127, 666, 672, 746, 135, 552, 20, 716, 933, 861, 633, 596, 731, 225, 247, 719, 925, 201, 697, 317, 553, 215, 209, 535, 173, 459, 786, 734, 941, 147, 321, 91, 641, 937, 725, 27, 646, 479, 266, 611, 407, 36, 608, 370, 12, 570, 753, 810, 991, 547, 823, 325, 278, 368, 313, 879, 561, 338, 429, 643, 710, 949, 756, 316, 294, 693, 815, 228, 39, 88, 305, 210, 556, 176, 7, 32, 344, 950, 637, 996, 940, 83, 673, 230, 812, 983, 868, 442, 768, 922, 764, 142, 964, 18, 229, 523, 293, 652, 657, 906, 82, 366, 615, 139, 917, 590, 451, 254, 462, 765, 13, 16, 689, 752, 953, 957, 782, 576, 306, 273, 818, 675, 401, 905, 248, 842, 497, 192, 493, 288, 473, 987, 684, 939, 833, 723, 759, 644, 951, 314, 635, 22, 29, 461, 555, 485, 197, 771, 257, 828, 994, 574, 251, 804, 234, 948, 311, 931, 977, 471, 449, 872, 226, 489, 617, 236, 956, 893, 436, 152, 118, 820, 634, 119, 911, 935, 276, 269, 692, 712, 301, 799, 621, 422, 563, 924, 439, 853, 6, 295, 283, 512, 96, 450, 154, 835, 703, 791, 249, 580, 105, 947, 64, 545, 320, 98, 394, 272, 263, 138, 132, 694, 256, 811, 901, 531, 267, 577, 998, 437, 661, 55, 123, 315, 708, 869, 607, 155, 604, 136, 455, 387, 365, 476, 282, 159, 189, 649, 358, 978, 383, 591, 90, 616, 626, 352, 877, 63, 508, 490, 932, 233, 396, 588, 909, 109, 726, 557, 816, 290, 796, 848, 629, 838, 466, 312, 664, 170, 384, 238, 224, 549, 873, 319, 194, 898, 972, 784, 333, 261, 970, 259, 17, 662, 67, 825, 250, 481, 834, 938, 704, 622, 221, 899, 515, 831, 516, 46, 420, 827, 183, 775, 984, 822, 482, 62, 184, 329, 3, 860, 651, 299, 408, 832, 400, 619, 946, 106, 536, 351, 788, 505, 836, 511, 780, 24, 707, 120, 191, 830, 42, 433, 625, 773, 891, 491, 653, 755, 72, 985, 683, 631, 669, 814, 414, 380, 502, 463, 237, 648, 60, 525, 841, 647, 475, 376, 797, 285, 583, 718, 128, 103, 211, 149, 71, 668, 137, 691, 361, 444, 148, 594, 817, 375, 742, 959, 81, 310, 920, 188, 894, 446, 28, 334, 504, 578, 892, 534, 417, 500, 701, 363, 199, 270, 609, 454, 339, 4, 754, 172, 798, 115, 448, 762, 309, 865, 844, 409, 866, 739, 761, 660, 153, 35, 887, 824, 568, 686, 150, 927, 418, 355, 538, 347, 602, 292, 544, 47, 262, 954, 346, 862, 177, 56, 495, 885, 501, 680, 19, 379, 735, 839, 94, 717, 171, 529, 706, 31, 326, 928, 204, 54, 772, 92, 758, 999, 356, 776, 412, 524, 112, 202, 274, 212, 624, 880, 286, 218, 65, 48, 595, 930, 143, 246, 193, 783, 158, 655, 881, 80, 688, 330, 185, 571, 41, 792, 681, 68, 146, 190, 26, 318, 469, 403, 377, 232, 986, 915, 829, 474, 428, 23, 415, 601, 385, 890, 774, 618, 567, 353, 470, 598, 114, 426, 846, 307, 140, 856, 395, 627, 169, 200, 460, 97, 526, 231, 599, 1, 962, 857, 166, 548, 975, 102, 942, 58, 955, 982, 187, 638, 244, 421, 929, 748, 275, 733, 973, 711, 914, 300, 904, 43, 980, 592, 104, 858, 302, 888, 131, 372, 354, 308, 558, 600, 913, 690, 160, 795, 800, 514, 640, 805, 342, 34, 630, 778, 855, 685, 371, 745, 85, 245, 750, 388, 10, 253, 404, 411, 902, 751, 965, 327, 779, 533, 507, 663, 424, 393, 845, 520, 582, 870, 883, 794, 399, 612, 900, 766, 724, 337, 402, 730, 496, 11, 416, 73, 884, 108, 386, 406, 747, 279, 206, 749, 203, 110, 826, 99, 636, 258, 702, 659, 9, 486, 610, 605, 79, 15, 129, 509, 464, 405, 676, 76, 763, 995, 551, 732, 364, 907, 281, 121, 296, 222, 162, 323, 803, 584, 360, 695, 367, 743, 219, 801, 133, 864, 532, 963, 757, 565, 851, 2, 882, 374, 324, 164, 687, 678, 807, 606, 554, 144, 241, 227, 527, 896, 37, 443, 715, 213, 181, 157, 944, 990, 239, 151, 348, 340, 413, 777, 513, 168, 819, 682, 721, 264, 331, 729, 458, 487, 175, 886, 268, 744, 808, 564, 100, 303, 654, 44, 304, 736, 50, 550, 897, 559, 503, 359, 390, 243, 410, 472, 738, 518, 936, 70, 240, 477, 709, 198, 585, 205, 349, 968, 397, 75, 33, 843, 297, 434, 186, 77, 628, 705, 214, 850, 639, 87, 357, 45, 163, 141};
        
        
        //--------------------------------------------------RUNNING THE PROGRAM CASES BELOW----------------------------------------------------------------------//
        //please uncomment case by case
        
        /**
         * SHELL SORT CASES
         */
        
        //Sorting.shellSort(arrayShell_Given);
        //Sorting.shellSort(arrayShell_10integers);
        //Sorting.shellSort(arrayShell_20integers);
        
        
        /**
         * BUBBLESORT CASES
         */
        
        //sorted cases
        //Sorting.bubbleSort(Arrays.copyOf(arrayBubble_Sorted,arrayBubble_Sorted.length));
        //Sorting.bubbleSort2(Arrays.copyOf(arrayBubble_Sorted,arrayBubble_Sorted.length));
        
        //unsorted cases
        //Sorting.bubbleSort(Arrays.copyOf(arrayBubble_Unsorted,arrayBubble_Unsorted.length));
        //Sorting.bubbleSort2(Arrays.copyOf(arrayBubble_Unsorted,arrayBubble_Unsorted.length));
        
        
        /**
         * RUNTIME CASES
         */
        
        //SHELL SORT RUNTIME CASES
        //Sorting.shellSortRuntime(Arrays.copyOf(runtime10sorted,10)," sorted");
        //Sorting.shellSortRuntime(Arrays.copyOf(runtime10unsorted,10)," unsorted");
        
        //Sorting.shellSortRuntime(Arrays.copyOf(runtime100sorted,100)," sorted");
        //Sorting.shellSortRuntime(Arrays.copyOf(runtime100unsorted,100)," unsorted");
        
        //Sorting.shellSortRuntime(Arrays.copyOf(runtime1000sorted,1000)," sorted");
        //Sorting.shellSortRuntime(Arrays.copyOf(runtime1000unsorted,1000)," unsorted");
        
        //BUBBLE SORT RUNTIME CASES
        //Sorting.bubbleSortRuntime(Arrays.copyOf(runtime10sorted,10)," sorted");
        //Sorting.bubbleSortRuntime(Arrays.copyOf(runtime10unsorted,10)," unsorted");
        
        //Sorting.bubbleSortRuntime(Arrays.copyOf(runtime100sorted,100)," sorted");
        //Sorting.bubbleSortRuntime(Arrays.copyOf(runtime100unsorted,100)," unsorted");
        
        //Sorting.bubbleSortRuntime(Arrays.copyOf(runtime1000sorted,1000)," sorted");
        //Sorting.bubbleSortRuntime(Arrays.copyOf(runtime1000unsorted,1000)," unsorted");
        
        //BUBBLE SORT 2 RUNTIME CASES
        //Sorting.bubbleSort2Runtime(Arrays.copyOf(runtime10sorted,10)," sorted");
        //Sorting.bubbleSort2Runtime(Arrays.copyOf(runtime10unsorted,10)," unsorted");
        
        //Sorting.bubbleSort2Runtime(Arrays.copyOf(runtime100sorted,100)," sorted");
        //Sorting.bubbleSort2Runtime(Arrays.copyOf(runtime100unsorted,100)," unsorted");
        
        //Sorting.bubbleSort2Runtime(Arrays.copyOf(runtime1000sorted,1000)," sorted");
        //Sorting.bubbleSort2Runtime(Arrays.copyOf(runtime1000unsorted,1000)," unsorted");
        
        
    }
}

